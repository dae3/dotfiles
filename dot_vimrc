" vim-plug
set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

Plug 'pangloss/vim-javascript'
Plug 'pprovost/vim-ps1'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'aklt/plantuml-syntax'
Plug 'elzr/vim-json'
Plug 'hashivim/vim-terraform'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-fugitive'
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'
Plug 'ludovicchabant/vim-gutentags'
Plug 'preservim/tagbar'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fireplace'
Plug 'guns/vim-sexp'
Plug 'fatih/vim-go' , { 'do': ':GoUpdateBinaries' }
Plug 'ctrlpvim/ctrlp.vim'
Plug 'github/copilot.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'guns/vim-sexp'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'tpope/vim-repeat'
Plug 'prabirshrestha/vim-lsp'
Plug 'rhysd/vim-lsp-ale'
call plug#end()
filetype plugin indent on

" misc settings
syntax on
color oceanic_material
set guioptions=MiRe " turn off gui chrome
set title
set hidden
set autochdir
set clipboard+=unnamed
set splitbelow splitright
set tabstop=4 shiftwidth=2 softtabstop=2 expandtab
set ignorecase
set encoding=utf-8
set relativenumber
set foldlevel=99
set spellsuggest=fast
set shortmess+=c
set belloff+=ctrlg
set background=dark
set completeopt=preview,menuone,noinsert
set diffopt+=,vertical

let mapleader="\\"
let maplocalleader="\\"

let g:ctrlp_cmd='CtrlPBuffer'
let g:terraform_fmt_on_save=1

command! VimgrepUnderCursor vimgrep <cword> % | copen
command! -nargs=? -complete=buffer VerticalSplitDiff wincmd o | vsplit | wincmd w | next | windo diffthis
command! GLucky :call netrw#BrowseX("https://google.com/search?q=" . expand('<cword>'), "0")
command! -bar -nargs=1 Gcap G commit -m <args> | G push
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

" diff buffer with saved file
function! s:DiffWithSaved()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
command! DiffSaved call s:DiffWithSaved()

" insert date in useful format for markdown headings
function! InsertDate()
  let l:date = strftime("%Y%m%d", localtime())
  execute 'normal! A' . l:date
endfunction

nnoremap <silent> <localleader>n :set relativenumber!<cr>
nnoremap <silent> <F5> :w \| make <CR>
nnoremap - ddp
nnoremap _ dd2kp
nnoremap <leader>wd :windo diffthis<cr>
nnoremap <leader>wdo :windo diffoff<cr>
nnoremap <leader>ev :ed ~/.vimrc<cr>
nnoremap <leader>evt :tabedit ~/.vimrc<cr>
nnoremap <leader>sv :source ~/.vimrc<cr>
inoremap <C-s> <esc>:w<CR>
inoremap <C-s><C-s> <esc>:w<CR>i
nnoremap <C-s> :w<CR>
inoremap jk <esc>
nnoremap <C-g>a :Gwrite<CR>
" turn off search highlight with <CR>
nnoremap <silent> <CR> :nohlsearch<CR><CR>

nnoremap <silent> B :GLucky<cr>

" autoparens
inoremap <expr> { AutoParen('{','}')
inoremap <expr> } AutoParen('}')
inoremap <expr> ( AutoParen('(',')')
inoremap <expr> ) AutoParen(')')
inoremap <expr> [ AutoParen('[',']')
inoremap <expr> ] AutoParen(']')
inoremap <expr> ' AutoParen("'", "'", 1)
inoremap <expr> " AutoParen('"', '"')
inoremap <expr> ` AutoParen('`', '`')

" varags
" 1. closing character
" 2. if truthy, only insert if there's a leading space
"    Used to avoid treating an apostrophe as an opening single quote,
function! AutoParen(char, ...)
  let l:line = getline('.')
  " step past closing character
  if strpart(l:line, col('.')-1,1) == a:char
    if len(l:line) == col('.')
      return "\<c-o>A"
    else
      return "\<c-o>l"
    endif
  else
    if a:0 == 1  " insert opening and closing characters
      return a:char . a:1 . "\<left>"
    elseif a:0 == 2
      " insert opening and closing IF there's a leading space, otherwise just
      " opening
      if (a:0 == 2 && a:2 == 1 && strpart(l:line, col('.')-2,1) == ' ')
        return a:char . a:1 . "\<left>"
      else
        return a:char
      endif
    else
      return a:char  " insert closing character
    endif
  endif
endfunction

" ale
let g:ale_fixers= {
      \ '*' : [ 'remove_trailing_lines', 'trim_whitespace' ],
      \ 'md' : [ 'prettier' ],
      \ 'tf' : [ 'terraform', 'remove_trailing_lines', 'trim_whitespace' ],
      \ 'go' : [ 'gofmt', 'remove_trailing_lines', 'trim_whitespace' ]
      \ }
let g:ale_linters = {
      \  'tf' : ['terraform-lsp'],
      \  'yaml' : [ 'yaml-language-server' ],
      \  'md': [ 'markdownlint','alex' ],
      \  'go': [ 'gopls' ],
      \ }
let g:ale_sign_error = "❌"
let g:ale_sign_warning = "⚠"
let g:ale_sign_info = "ⓘ"
let g:ale_echo_cursor=0
let g:ale_virtualtext_cursor=1
let g:ale_completion_enabled=1
let g:ale_fix_on_save=1
let g:ale_set_quickfix=1
let g:ale_disable_lsp=0

" clojure-lsp doesn't work directly with ale, use vim-lsp instead
au User lsp_setup call lsp#register_server({
      \ 'name': 'clojure-lsp',
      \ 'cmd': ['clojure-lsp'],
      \ 'allowlist': ['clojure'],
      \ })

nnoremap <silent> ]c :ALENextWrap<cr>
nnoremap <silent> [c :ALEPreviousWrap<cr>
nnoremap <silent> K :ALEHover<cr>

" not ALE specific but borrowed from ale.txt
" close loclist with buffer
augroup CloseLoclistWindowGroup
  autocmd!
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

"netrw
nnoremap <silent> <c-n> :Lexplore<cr>
let g:netrw_banner=0
let g:netrw_liststyle=3 " tree
let g:netrw_browse_split=4 " browse like Preview
let g:netrw_preview=1  " vertical split
let g:netrw_alto=0
let g:netrw_winsize=30
augroup netrw
  autocmd!
  autocmd filetype netrw nnoremap <silent> <buffer> <c-n> :bd!<cr>
  autocmd filetype netrw nnoremap <silent> <buffer> S <Plug>NetrwTreeSqueeze
augroup end

" Terraform
augroup terraform
  autocmd!
  " TODO does this work?
  autocmd FileType terraform setlocal errorformat="Error\ loading\ files\ Error\ parsing %f:\ At\ %l:%c:\ %m"
augroup END

command! Ta Dispatch terraform apply tfplan -no-color
command! Tv Dispatch terraform validate -no-color
command! Tp Dispatch terraform plan -out tfplan -no-color

" abbreviations

" markdown
let g:vim_markdown_autowrite = 1
let g:markdown_auto_title = 0
" insert filename as level 1 title
function! InsertMarkdownTitle()
  if g:markdown_auto_title
    let l:firstline = getline(1)
    let l:title = '# ' . expand('%:t:r')
    if match(l:firstline, l:title) == -1
      call append(0, l:title)
    endif
  endif
endfunction

"" auto bullet and wrap don't play well
"" https://github.com/plasticboy/vim-markdown/issues/232
let g:vim_markdown_auto_insert_bullets = 0
let g_vim_markdown_new_list_item_indent = 0
augroup markdown
  au!
  au FileType markdown setlocal conceallevel=2 spell spelllang=en_au
  au FileType markdown setlocal textwidth=0 wrap linebreak nolist
  " au FileType markdown AutoSaveToggle
  au FileType markdown setlocal comments=fb:>,fb:*,fb:+,fb:-
  au FileType markdown setlocal formatoptions -=q
  au FileType markdown setlocal formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^\\s*\[-*+]\\s\\+
  autocmd FileType markdown autocmd InsertLeave <buffer> :w
  autocmd FileType markdown autocmd BufWritePre <buffer> call InsertMarkdownTitle()
augroup END
" let g:instant_markdown_slow = 1

" airline
let g:airline_theme='oceanicnextlight'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_skip_empty_sections = 1
let g:airline_powerline_fonts = 1
let g:airline_section_z=""
" selective cursorline
augroup cln
  autocmd!
  autocmd WinEnter * set cursorline
  autocmd WinLeave * set nocursorline
augroup end

" disable gutentags if there's no ctags because it explodes badly
if ! executable('ctags')
  let g:gutentags_enabled=0
endif
